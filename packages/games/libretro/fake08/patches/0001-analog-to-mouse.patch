diff --git a/platform/libretro/libretro.cpp b/platform/libretro/libretro.cpp
index 927ea8d..bdafa7f 100644
--- a/platform/libretro/libretro.cpp
+++ b/platform/libretro/libretro.cpp
@@ -223,21 +223,23 @@ EXPORT void retro_run()
             }
         }
 
-        mouseBtnState = 0;
-
-        if (_memory->drawState.devkitMode) {
-            int16_t pressed = input_state_cb(0, RETRO_DEVICE_POINTER, 0, RETRO_DEVICE_ID_POINTER_PRESSED);
-            int16_t pointX = input_state_cb(0, RETRO_DEVICE_POINTER, 0, RETRO_DEVICE_ID_POINTER_X);
-            int16_t pointY = input_state_cb(0, RETRO_DEVICE_POINTER, 0, RETRO_DEVICE_ID_POINTER_Y);
-            
-            if (pressed) {
-                picoMouseX = pointX * 64 / 32768 + 64;
-                picoMouseY = pointY * 64 / 32768 + 64;
-                mouseBtnState = 1;
-            }
-        }
-        
-        setInputState(currKDown, currKHeld, picoMouseX, picoMouseY, mouseBtnState);
+	// Read the analog X/Y
+	int16_t analogX = input_state_cb(0, RETRO_DEVICE_ANALOG, RETRO_DEVICE_INDEX_ANALOG_LEFT, RETRO_DEVICE_ID_ANALOG_X);
+	int16_t analogY = input_state_cb(0, RETRO_DEVICE_ANALOG, RETRO_DEVICE_INDEX_ANALOG_LEFT, RETRO_DEVICE_ID_ANALOG_Y);
+
+	// Pre-calculate where the cursor will be
+	int16_t tempX = picoMouseX + (((PicoScreenWidth / 32767.0f ) * analogX)/32);
+	int16_t tempY = picoMouseY + (((PicoScreenHeight / 32767.0f ) * analogY)/32);
+
+	// Make sure the cursor stays within the screen
+	if ( ((tempX - 0) | (PicoScreenWidth - tempX)) >= 0)	picoMouseX = tempX;
+	if ( ((tempY - 0) | (PicoScreenHeight - tempY)) >= 0)	picoMouseY = tempY;
+
+	// Grab the state of the X button
+	int16_t pressed = input_state_cb(0, RETRO_DEVICE_JOYPAD, 0, RETRO_DEVICE_ID_JOYPAD_X);
+
+	// Send all state info to the core.
+	setInputState(currKDown, currKHeld, picoMouseX, picoMouseY, pressed);
 
         _vm->UpdateAndDraw();
         kHeld = currKHeld;
