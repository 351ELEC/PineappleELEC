From 65e79018b7f933c359457fdcbd490d7f967c3146 Mon Sep 17 00:00:00 2001
From: pkegg <pkegg>
Date: Sun, 26 Sep 2021 10:53:00 -0600
Subject: [PATCH] Decoration Override Changes to allow decoration configuration
 in the UI

---
 es-app/CMakeLists.txt                    |   6 +-
 es-app/src/guis/GuiDecorationOptions.cpp | 231 +++++++++++++++++++++++
 es-app/src/guis/GuiDecorationOptions.h   |  24 +++
 es-app/src/guis/GuiMenu.cpp              |  44 ++++-
 es-app/src/guis/GuiMenu.h                |   1 +
 5 files changed, 299 insertions(+), 7 deletions(-)
 create mode 100644 es-app/src/guis/GuiDecorationOptions.cpp
 create mode 100644 es-app/src/guis/GuiDecorationOptions.h

diff --git a/es-app/CMakeLists.txt b/es-app/CMakeLists.txt
index 4a62cdf3..bcdacae1 100644
--- a/es-app/CMakeLists.txt
+++ b/es-app/CMakeLists.txt
@@ -39,7 +39,8 @@ set(ES_HEADERS
     ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiGameScraper.h
     ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiGameOptions.h    
 	${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiGamelistOptions.h    
-    ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiGeneralScreensaverOptions.h 
+    ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiGeneralScreensaverOptions.h
+    ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiDecorationOptions.h
     ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiMenu.h
     ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiSettings.h
     ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiScraperMulti.h
@@ -137,7 +138,8 @@ set(ES_SOURCES
     ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiGameScraper.cpp
 	${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiGameOptions.cpp
     ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiGamelistOptions.cpp    
-    ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiGeneralScreensaverOptions.cpp    
+    ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiGeneralScreensaverOptions.cpp
+    ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiDecorationOptions.cpp
     ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiMenu.cpp
     ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiSettings.cpp
     ${CMAKE_CURRENT_SOURCE_DIR}/src/guis/GuiScraperMulti.cpp
diff --git a/es-app/src/guis/GuiDecorationOptions.cpp b/es-app/src/guis/GuiDecorationOptions.cpp
new file mode 100644
index 00000000..988898d7
--- /dev/null
+++ b/es-app/src/guis/GuiDecorationOptions.cpp
@@ -0,0 +1,231 @@
+#include "guis/GuiDecorationOptions.h"
+
+#include "Window.h"
+#include "GuiSettings.h"
+#include "components/OptionListComponent.h"
+#include "components/SliderComponent.h"
+#include "components/SwitchComponent.h"
+#include "guis/GuiMsgBox.h"
+
+#include "Settings.h"
+#include "LocaleES.h"
+#include "ApiSystem.h"
+#include "guis/GuiTextEditPopup.h"
+#include "guis/GuiTextEditPopupKeyboard.h"
+
+#include "SystemConf.h"
+#include "ApiSystem.h"
+
+GuiDecorationOptions::GuiDecorationOptions(Window *window,
+										   const std::string &configName,
+										   const std::map<std::string, std::string> &decorationSetNameToPath) : GuiSettings(window, _("DECORATION OPTIONS")),
+																											   mConfigName(configName),
+																											   mDecorationSetNameToPath(decorationSetNameToPath)
+
+{
+	auto selectedDecoration = SystemConf::getInstance()->get(mConfigName + ".bezel");
+
+	//Check for both <system>.bezel and then global.bezel if <system>.bezel is set to auto
+	if (Utils::String::toUpper(selectedDecoration) == "AUTO" || selectedDecoration == "")
+	{
+		selectedDecoration = SystemConf::getInstance()->get("global.bezel");
+		if (Utils::String::toUpper(selectedDecoration) == "AUTO" || selectedDecoration == "")
+		{
+			selectedDecoration = "default";
+		}
+	}
+
+	std::string decorationPath;
+
+	try
+	{
+		decorationPath = mDecorationSetNameToPath.at(selectedDecoration);
+		LOG(LogDebug) << "Decoration: " << selectedDecoration<< " Path: " << decorationPath;
+	}
+	catch (...)
+	{
+		LOG(LogError) << "No path found for decoration: " << selectedDecoration;
+		return;
+	}
+
+	mMenu.addGroup(_("OVERRIDES"));
+	// System Options
+
+	auto systemsList = std::make_shared<OptionListComponent<std::string>>(mWindow, _("SYSTEM"), false);
+
+	std::string systemsType = SystemConf::getInstance()->get(mConfigName + ".bezel.system.override");
+
+	LOG(LogDebug) << "Systems type: " << systemsType;
+
+	for (auto system : getAvailableSystems(decorationPath))
+	{
+		systemsList->add(system, system, systemsType == system);
+	}
+	if (systemsList->getSelectedName() == "")
+	{
+		systemsList->selectFirstItem();
+	}
+
+	addWithDescription(_("SYSTEM"), _("Forces specific system bezel"), systemsList);
+	systemsList->setSelectedChangedCallback([this](std::string system)
+	{
+		if (SystemConf::getInstance()->set(mConfigName + ".bezel.system.override", system))
+		{
+			LOG(LogDebug) << "Pushing new GUI Decorations page: " << mConfigName;
+
+			//Make temporary copy of variables to survive delete
+			auto newConfig = std::string(mConfigName);
+			const std::map<std::string, std::string> newDSNTP(mDecorationSetNameToPath);
+
+			Window *pw = mWindow;
+			delete this;
+
+			try
+			{
+				pw->pushGui(new GuiDecorationOptions(pw, newConfig, newDSNTP));
+			}
+			catch (...)
+			{
+				LOG(LogError) << "Caught an exception in systems list callback.  Not sure the deal";
+			}
+													
+		}
+	});
+
+	std::string systemOverride = SystemConf::getInstance()->get(mConfigName + ".bezel.system.override");
+
+    auto systemName = mConfigName;
+	LOG(LogDebug) << "System Override: " << systemOverride << " Current System: " << systemName;
+
+	if (systemOverride != "" && Utils::String::toUpper(systemOverride) != "AUTO")
+	{
+		systemName = systemOverride;
+	}
+
+	// System Options
+	auto gamesList = std::make_shared<OptionListComponent<std::string>>(mWindow, _("GAME"), false);
+	std::string gamesType = SystemConf::getInstance()->get(mConfigName + ".bezel.game.override");
+	for (auto game : getAvailableGames(decorationPath, systemName))
+	{
+		gamesList->add(game, game, gamesType == game);
+	}
+	if (gamesList->getSelectedName() == "")
+	{
+		gamesList->selectFirstItem();
+	}
+
+	addWithDescription(_("GAME"), _("Forces specific game bezel"), gamesList);
+	gamesList->setSelectedChangedCallback([this](std::string game)
+	{
+		LOG(LogDebug) << "Saving game override: " << game << "for system: "+mConfigName;
+
+		SystemConf::getInstance()->set(mConfigName + ".bezel.game.override", game);
+	});
+
+	auto options = getOptions(decorationPath, systemName);
+	if (options.size() > 0)
+	{
+		LOG(LogDebug) << "Options exist.  Number: " << options.size();
+
+		mMenu.addGroup(_("OVERLAYS"));
+
+		for (auto option : options)
+		{
+
+			auto fileName = Utils::FileSystem::getFileName(option);
+			auto fileConfigName = Utils::String::replace(fileName, ".png", "");
+			const auto fileConfigNameUpper = Utils::String::toUpper(fileConfigName);
+			auto optionConfigName = ".bezel.overlay." + fileConfigName;
+
+			LOG(LogDebug) << "Option config : " << optionConfigName << " option file: " << option;
+
+			auto optionComponent = std::make_shared<OptionListComponent<std::string>>(mWindow, _(fileConfigNameUpper.c_str()));
+
+			optionComponent->add(_("AUTO"), "auto", SystemConf::getInstance()->get(configName + optionConfigName) != "0" && SystemConf::getInstance()->get(configName + optionConfigName) != "1");
+			optionComponent->add(_("YES"), "1", SystemConf::getInstance()->get(configName + optionConfigName) == "1");
+			optionComponent->add(_("NO"), "0", SystemConf::getInstance()->get(configName + optionConfigName) == "0");
+
+			addWithLabel(_(fileConfigNameUpper.c_str()), optionComponent);
+			addSaveFunc([this, optionComponent, optionConfigName]
+						{ SystemConf::getInstance()->set(mConfigName + optionConfigName, optionComponent->getSelected()); });
+		}
+	}
+}
+
+std::vector<std::string> GuiDecorationOptions::getAvailableSystems(std::string path)
+{
+	std::vector<std::string> systems;
+	systems.push_back("AUTO");
+	systems.push_back("NONE");
+
+	std::string systemsDir = path + "/systems/";
+
+	LOG(LogDebug) << "Looking for available systems in: " << systemsDir;
+
+	auto systemsPngs = Utils::FileSystem::getDirContent(systemsDir.c_str(), false);
+	for (Utils::FileSystem::stringList::const_iterator j = systemsPngs.cbegin(); j != systemsPngs.cend(); ++j)
+	{
+		auto systemsPng = *j;
+		if (Utils::FileSystem::isRegularFile(systemsPng) && Utils::String::endsWith(systemsPng, ".png"))
+		{
+			auto availableSystem = Utils::FileSystem::getStem(systemsPng);
+			LOG(LogDebug) << "Found system: " << availableSystem;
+			systems.push_back(availableSystem);
+		}
+	}
+	return systems;
+}
+
+std::vector<std::string> GuiDecorationOptions::getAvailableGames(std::string path, std::string systemName)
+{
+	std::vector<std::string> availableGames;
+	availableGames.push_back("AUTO");
+	availableGames.push_back("NONE");
+	if (Utils::String::toUpper(systemName) == "NONE")
+	{
+		return availableGames;
+	}
+	std::string gamesDir = path + "/systems/" + systemName + "/games";
+	LOG(LogDebug) << "Looking for available games in: " << gamesDir;
+
+	if (Utils::FileSystem::exists(gamesDir.c_str()))
+	{
+		auto gamesFiles = Utils::FileSystem::getDirContent(gamesDir.c_str(), true);
+
+		for (Utils::FileSystem::stringList::const_iterator j = gamesFiles.cbegin(); j != gamesFiles.cend(); ++j)
+		{
+			auto gameFile = *j;
+			if (Utils::FileSystem::isRegularFile(gameFile) && Utils::String::endsWith(gameFile, ".cfg"))
+			{
+				auto gameName = Utils::FileSystem::getStem(gameFile);
+				LOG(LogDebug) << "Game Name: " << gameName << "Game Config file: " << gameFile;;
+				availableGames.push_back(gameName);
+			}
+		}
+	}
+	return availableGames;
+}
+std::vector<std::string> GuiDecorationOptions::getOptions(std::string path, std::string systemName)
+{
+	std::vector<std::string> options;
+	if (Utils::String::toUpper(systemName) == "NONE")
+	{
+		return options;
+	}
+	std::string overlay_dir = path + "/systems/" + systemName + "/overlays";
+	LOG(LogDebug) << "Looking for options in: " << overlay_dir;
+	if (Utils::FileSystem::exists(overlay_dir.c_str()))
+	{
+		auto bezel_files = Utils::FileSystem::getDirContent(overlay_dir.c_str(), true);
+		for (Utils::FileSystem::stringList::const_iterator j = bezel_files.cbegin(); j != bezel_files.cend(); ++j)
+		{
+			auto bezel_file = *j;
+			if (Utils::FileSystem::isRegularFile(bezel_file) && Utils::String::endsWith(bezel_file, ".png"))
+			{
+				LOG(LogDebug) << "Option file found: " << bezel_file;
+				options.push_back(bezel_file);
+			}
+		}
+	}
+	return options;
+}
\ No newline at end of file
diff --git a/es-app/src/guis/GuiDecorationOptions.h b/es-app/src/guis/GuiDecorationOptions.h
new file mode 100644
index 00000000..9a177a0c
--- /dev/null
+++ b/es-app/src/guis/GuiDecorationOptions.h
@@ -0,0 +1,24 @@
+#pragma once
+#ifndef ES_APP_GUIS_GUI_DECORATION_OPTIONS_H
+#define ES_APP_GUIS_GUI_DECORATION_OPTIONS_H
+
+#include "GuiSettings.h"
+#include "components/OptionListComponent.h"
+#include "guis/GuiMenu.h"
+
+class TextComponent;
+
+class GuiDecorationOptions : public GuiSettings
+{
+public:
+    GuiDecorationOptions(Window *window, const std::string &configName, const std::map<std::string, std::string> &decorationSetNameToPath);
+
+private:
+    std::vector<std::string> getAvailableSystems(std::string path);
+    std::vector<std::string> getAvailableGames(std::string path, std::string systemName);
+    std::vector<std::string> getOptions(std::string path, std::string systemName);
+    std::map<std::string, std::string> mDecorationSetNameToPath;
+    std::string mConfigName;
+};
+
+#endif // ES_APP_GUIS_GUI_DECORATION_OPTIONS_H
diff --git a/es-app/src/guis/GuiMenu.cpp b/es-app/src/guis/GuiMenu.cpp
index 2e324904..e13358cf 100644
--- a/es-app/src/guis/GuiMenu.cpp
+++ b/es-app/src/guis/GuiMenu.cpp
@@ -10,6 +10,7 @@
 #include "guis/GuiScraperStart.h"
 #include "guis/GuiThemeInstallStart.h" //batocera
 #include "guis/GuiPackageInstallStart.h" //351elec
+#include "guis/GuiDecorationOptions.h" //351elec
 #include "guis/GuiBezelInstallStart.h" //batocera
 #include "guis/GuiBatoceraStore.h" //batocera
 #include "guis/GuiSettings.h"
@@ -845,7 +846,18 @@ void GuiMenu::openSystemInformations_batocera()
 
 	window->pushGui(informationsGui);
 }
+void GuiMenu::openDecorationConfiguration(Window *mWindow, std::string configName, std::vector<DecorationSetInfo> sets)
+{
+	//Using a shared pointer to ensure the memory doesn't cause issues in the other class
+	std::map<std::string, std::string> decorationSetNameToPath;
+	for (auto set : sets)
+	{
+		decorationSetNameToPath.insert(std::make_pair(set.name, set.path));
+	}
 
+	auto decorationOptions = new GuiDecorationOptions(mWindow, configName, decorationSetNameToPath);
+	mWindow->pushGui(decorationOptions);
+}
 void GuiMenu::openDeveloperSettings()
 {
 	Window *window = mWindow;
@@ -2247,7 +2259,7 @@ void GuiMenu::openGamesSettings_batocera()
         s->addWithLabel(_("RGA SCALE (FOR MOST CONSOLES)"), rgascale_enabled);
         s->addSaveFunc([rgascale_enabled] { SystemConf::getInstance()->set("global.rgascale", rgascale_enabled->getSelected()); });
 
-#ifndef _ENABLEEMUELEC
+//#ifndef _ENABLEEMUELEC - 351elec - enable decorations
 	// decorations
 	if (ApiSystem::getInstance()->isScriptingSupported(ApiSystem::DECORATIONS))
 	{
@@ -2272,12 +2284,23 @@ void GuiMenu::openGamesSettings_batocera()
 					(SystemConf::getInstance()->get("global.bezel") == "none" && *it == _("NONE")) ||
 					(SystemConf::getInstance()->get("global.bezel") == "" && *it == _("AUTO")));
 
+			if (decorations->getSelectedName() == "")
+			{
+				decorations->selectFirstItem();
+			}
+
 			s->addWithLabel(_("DECORATION"), decorations);
-			s->addSaveFunc([decorations]
+
+			decorations->setSelectedChangedCallback([decorations](std::string value)
 			{
-				SystemConf::getInstance()->set("global.bezel", decorations->getSelected() == _("NONE") ? "none" : decorations->getSelected() == _("AUTO") ? "" : decorations->getSelected());
+				LOG(LogDebug) << "Setting bezel on change to: " << value;
+
+				SystemConf::getInstance()->set("global.bezel", Utils::String::toLower(value));
 			});
-#if !defined(WIN32) || defined(_DEBUG)
+
+//351elec - stretch bezels does not have a place in 351elec
+#ifndef _ENABLEEMUELEC
+//#if !defined(WIN32) || defined(_DEBUG)
 			// stretch bezels
 			auto bezel_stretch_enabled = std::make_shared<OptionListComponent<std::string>>(mWindow, _("STRETCH BEZELS (4K & ULTRAWIDE)"));
 			bezel_stretch_enabled->add(_("AUTO"), "auto", SystemConf::getInstance()->get("global.bezel_stretch") != "0" && SystemConf::getInstance()->get("global.bezel_stretch") != "1");
@@ -2293,7 +2316,7 @@ void GuiMenu::openGamesSettings_batocera()
 #endif
 		}
 	}
-#endif
+// #endif - 351elec - enable decorations
 	// latency reduction
 	s->addEntry(_("LATENCY REDUCTION"), true, [this] { openLatencyReductionConfiguration(mWindow, "global"); });
 
@@ -4310,9 +4333,20 @@ void GuiMenu::popSpecificConfigurationGui(Window* mWindow, std::string title, st
 			systemConfiguration->addWithLabel(_("DECORATION"), decorations);
 			systemConfiguration->addSaveFunc([decorations, configName]
 			{
+				LOG(LogDebug) << "Setting bezel save: " << configName << " to: " << decorations->getSelected();
+
 				SystemConf::getInstance()->set(configName + ".bezel", decorations->getSelected() == _("NONE") ? "none" : decorations->getSelected() == _("AUTO") ? "" : decorations->getSelected());
 			});
 
+			//351elec - set decoration on change so it's update for decoration options without exiting screen
+			decorations->setSelectedChangedCallback([decorations, configName](std::string value)
+			{
+				LOG(LogDebug) << "Setting bezel on change: " << configName << " to: " << value;
+
+				SystemConf::getInstance()->set(configName + ".bezel", Utils::String::toLower(value));
+			});
+            systemConfiguration->addEntry(_("DECORATION OPTIONS"), true, [mWindow, configName, sets]
+                                              { openDecorationConfiguration(mWindow, configName, sets); });
 #if !defined(WIN32) || defined(_DEBUG)
 //			// stretch bezels
 //			auto bezel_stretch_enabled = std::make_shared<OptionListComponent<std::string>>(mWindow, _("STRETCH BEZELS (4K & ULTRAWIDE)"));
diff --git a/es-app/src/guis/GuiMenu.h b/es-app/src/guis/GuiMenu.h
index 9d4c3be3..b5525f5d 100644
--- a/es-app/src/guis/GuiMenu.h
+++ b/es-app/src/guis/GuiMenu.h
@@ -102,6 +102,7 @@ private:
 	std::vector<StrInputConfig*> mLoadedInput; // used to keep information about loaded devices in case there are unpluged between device window load and save
 	void clearLoadedInput();
 	static void createDecorationItemTemplate(Window* window, std::vector<DecorationSetInfo> sets, std::string data, ComponentListRow& row);
+	static void openDecorationConfiguration(Window *mWindow, std::string configName, std::vector<DecorationSetInfo> sets);
 
 	bool checkNetwork();
 
-- 
2.25.1

