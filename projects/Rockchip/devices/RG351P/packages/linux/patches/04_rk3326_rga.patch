diff -rupN RG351P-linux-718abd7245ab07d144e03826d7b0f161ab66bed2.orig/drivers/video/rockchip/rga2/rga2_drv.c RG351P-linux-718abd7245ab07d144e03826d7b0f161ab66bed2/drivers/video/rockchip/rga2/rga2_drv.c
--- RG351P-linux-718abd7245ab07d144e03826d7b0f161ab66bed2.orig/drivers/video/rockchip/rga2/rga2_drv.c	2020-12-05 18:21:52.962797049 -0500
+++ RG351P-linux-718abd7245ab07d144e03826d7b0f161ab66bed2/drivers/video/rockchip/rga2/rga2_drv.c	2020-12-10 09:37:15.908082438 -0500
@@ -122,7 +122,7 @@ static void rga2_try_set_reg(void);
 
 
 /* Logging */
-#define RGA_DEBUG 1
+#define RGA_DEBUG 0
 #if RGA_DEBUG
 #define DBG(format, args...) printk(KERN_DEBUG "%s: " format, DRIVER_NAME, ## args)
 #define ERR(format, args...) printk(KERN_ERR "%s: " format, DRIVER_NAME, ## args)
@@ -136,7 +136,7 @@ static void rga2_try_set_reg(void);
 #endif
 
 #if RGA2_DEBUGFS
-static const char *rga2_get_cmd_mode_str(u32 cmd)
+static const char __maybe_unused *rga2_get_cmd_mode_str(u32 cmd)
 {
 	switch (cmd) {
 	case RGA_BLIT_SYNC:
@@ -154,7 +154,7 @@ static const char *rga2_get_cmd_mode_str
 	}
 }
 
-static const char *rga2_get_blend_mode_str(u16 alpha_rop_flag, u16 alpha_mode_0,
+static const char __maybe_unused *rga2_get_blend_mode_str(u16 alpha_rop_flag, u16 alpha_mode_0,
 					   u16 alpha_mode_1)
 {
 	if (alpha_rop_flag == 0) {
@@ -171,7 +171,7 @@ static const char *rga2_get_blend_mode_s
 	}
 }
 
-static const char *rga2_get_render_mode_str(u8 mode)
+static const char __maybe_unused *rga2_get_render_mode_str(u8 mode)
 {
 	switch (mode) {
 	case 0x0:
@@ -189,7 +189,7 @@ static const char *rga2_get_render_mode_
 	}
 }
 
-static const char *rga2_get_rotate_mode_str(u8 mode)
+static const char __maybe_unused *rga2_get_rotate_mode_str(u8 mode)
 {
 	switch (mode) {
 	case 0x0:
@@ -245,7 +245,7 @@ static bool rga2_is_yuv8bit_format(uint3
 	return ret;
 }
 
-static const char *rga2_get_format_name(uint32_t format)
+static const char __maybe_unused *rga2_get_format_name(uint32_t format)
 {
 	switch (format) {
 	case RGA2_FORMAT_RGBA_8888:
@@ -686,10 +686,10 @@ static int rga2_flush(rga2_session *sess
 {
 	int ret = 0;
 	int ret_timeout;
+#if RGA2_DEBUGFS
 	ktime_t start;
 	ktime_t end;
 
-#if RGA2_DEBUGFS
 	if (RGA2_TEST_TIME)
 		start = ktime_get();
 #endif
@@ -703,7 +703,9 @@ static int rga2_flush(rga2_session *sess
 		pr_err("flush pid %d wait task ret %d\n", session->pid, ret);
 		pr_err("interrupt = %x status = %x\n", rga2_read(RGA2_INT),
 		       rga2_read(RGA2_STATUS));
+#if RGA2_DEBUGFS
 		rga2_printf_cmd_buf(p);
+#endif
 		DBG("rga2 CMD\n");
 		for (i = 0; i < 7; i++)
 			DBG("%.8x %.8x %.8x %.8x\n",
@@ -722,7 +724,9 @@ static int rga2_flush(rga2_session *sess
 		       session->pid, atomic_read(&session->task_running));
 		pr_err("interrupt = %x status = %x\n",
 		       rga2_read(RGA2_INT), rga2_read(RGA2_STATUS));
+#if RGA2_DEBUGFS
 		rga2_printf_cmd_buf(p);
+#endif
 		DBG("rga2 CMD\n");
 		for (i = 0; i < 7; i++)
 			DBG("%.8x %.8x %.8x %.8x\n",
@@ -1110,7 +1114,7 @@ static int rga2_get_img_info(rga_img_inf
 	u32 vir_w, vir_h;
 	int yrgb_addr = -1;
 	int ret = 0;
-	void *vaddr;
+	void __maybe_unused *vaddr;
 
 	rga_dev = rga2_drvdata->dev;
 	yrgb_addr = (int)img->yrgb_addr;
@@ -1564,7 +1568,9 @@ retry:
 			ret_timeout);
 		pr_err("interrupt = %x status = %x\n",
 		       rga2_read(RGA2_INT), rga2_read(RGA2_STATUS));
+#if RGA2_DEBUGFS
 		rga2_printf_cmd_buf(p);
+#endif
 		DBG("rga2 CMD\n");
 		for (i = 0; i < 7; i++)
 			DBG("%.8x %.8x %.8x %.8x\n",
@@ -1583,7 +1589,9 @@ retry:
 			session->pid, atomic_read(&session->task_running));
 		pr_err("interrupt = %x status = %x\n",
 		       rga2_read(RGA2_INT), rga2_read(RGA2_STATUS));
+#if RGA2_DEBUGFS
 		rga2_printf_cmd_buf(p);
+#endif
 		DBG("rga2 CMD\n");
 		for (i = 0; i < 7; i++)
 			DBG("%.8x %.8x %.8x %.8x\n",
@@ -2203,6 +2211,67 @@ static int rga2_drv_remove(struct platfo
 	return 0;
 }
 
+static int rga_enable_clocks(struct device *dev)
+{
+    int ret;
+
+    ret = clk_prepare_enable(rga2_drvdata->clk_rga2);
+    if (ret) {
+        pr_err("Cannot enable rga sclk: %d\n", ret);
+        return ret;
+    }
+
+    ret = clk_prepare_enable(rga2_drvdata->aclk_rga2);
+    if (ret) {
+        pr_err("Cannot enable rga aclk: %d\n", ret);
+        goto err_disable_sclk;
+    }
+
+    ret = clk_prepare_enable(rga2_drvdata->hclk_rga2);
+    if (ret) {
+        pr_err("Cannot enable rga hclk: %d\n", ret);
+        goto err_disable_aclk;
+    }
+
+    return 0;
+
+err_disable_sclk:
+	clk_disable_unprepare(rga2_drvdata->clk_rga2);
+err_disable_aclk:
+	clk_disable_unprepare(rga2_drvdata->aclk_rga2);
+
+    return ret;
+}
+
+
+static void rga_disable_clocks(struct device *dev)
+{
+    (void)dev;
+	clk_disable_unprepare(rga2_drvdata->clk_rga2);
+	clk_disable_unprepare(rga2_drvdata->hclk_rga2);
+	clk_disable_unprepare(rga2_drvdata->aclk_rga2);
+}
+
+
+static int __maybe_unused rga_runtime_suspend(struct device *dev)
+{
+    rga_disable_clocks(dev);
+
+    return 0;
+}
+
+static int __maybe_unused rga_runtime_resume(struct device *dev)
+{
+    return rga_enable_clocks(dev);
+}
+
+
+static const struct dev_pm_ops rga_pm = {
+    SET_RUNTIME_PM_OPS(rga_runtime_suspend,
+        rga_runtime_resume, NULL)
+};
+
+
 static struct platform_driver rga2_driver = {
 	.probe		= rga2_drv_probe,
 	.remove		= rga2_drv_remove,
@@ -2211,6 +2280,7 @@ static struct platform_driver rga2_drive
 		.owner  = THIS_MODULE,
 #endif
 		.name	= "rga2",
+		.pm     = &rga_pm,
 		.of_match_table = of_match_ptr(rockchip_rga_dt_ids),
 	},
 };
diff -rupN RG351P-linux-718abd7245ab07d144e03826d7b0f161ab66bed2.orig/drivers/video/rockchip/rga2/rga2.h RG351P-linux-718abd7245ab07d144e03826d7b0f161ab66bed2/drivers/video/rockchip/rga2/rga2.h
--- RG351P-linux-718abd7245ab07d144e03826d7b0f161ab66bed2.orig/drivers/video/rockchip/rga2/rga2.h	2020-12-05 18:21:52.962797049 -0500
+++ RG351P-linux-718abd7245ab07d144e03826d7b0f161ab66bed2/drivers/video/rockchip/rga2/rga2.h	2020-12-10 09:36:40.175498311 -0500
@@ -713,7 +713,7 @@ struct rga2_service_info {
 };
 
 #define RGA2_TEST_CASE 0
-#define RGA2_DEBUGFS 1
+#define RGA2_DEBUGFS 0
 
 //General Registers
 #define RGA2_SYS_CTRL             0x000
